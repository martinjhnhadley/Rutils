fDir <- file.info(x[1])$isdir
}else{ # all subsequent loops append df
name <- rbind(name, x[i])
type <- rbind(type, file_ext(x[i]))
size <- rbind(size, as.numeric(round(file.size(x[i])/1048576, 2)))
create <- rbind(create , format(as.Date(file.info(x[i])$ctime),"%Y-%m-%d"))
mod <- rbind(mod, format(as.Date(file.info(x[i])$mtime),"%Y-%m-%d"))
fDir <- rbind(fDir, file.info(x[i])$isdir)
}
}
# MAKE DF
df <- cbind(name, type, size, create, mod, fDir)
df <- data.frame(df, stringsAsFactors = F, row.names = 1:length(x))
colnames(df) <- c("Name","Type", "Size", "Created", "LastModified", "Dir")
df$Size <- as.numeric(df$Size)
# load message
cat(paste0("\nHere's what I found in your directory: \n",
"\tFile(s): ",sum(df$Type !="----"), "\t", "Total Size (MB): ", ifelse(sum(df$Size)==0,"< 0.5 MB", sum(df$Size != "< 0.5 MB")),
"\tSub Directories: ", sum(df$Dir == T),
"\n\n",
"Overview (i.e., pwd):\n\n"))
# recode
df$Type[df$Type==""] <- "----"
df$Size[df$Size == 0] <- "< 0.5 MB"
# sorting & print
if(sort == "name"){
df <- df[order(df$Name),]
}
else if(sort == "type"){
df <- df[order(df$Type),]
}
else if(sort == "size"){
df <- df[order(df$Size),]
}
else if(sort == "created"){
df <- df[order(df$Size),]
}
else if(sort == "modified"){
df <- df[order(df$Size),]
}
# print
return(df)
# BUILD SUB DIRECTORIES DF---------------------------
subDF <- subset(df, df$Dir == TRUE)
# for the total number of subdirectories
#™subNum = 0
for(i in 1:length(subDF$Name)){
cat("\n")
return(subDF$Name[i])
}
}
get.dirInfo()
#===============================================================================
# FUNCTION: Get file/directory size in MBs - default is dir()
#===============================================================================
get.dirInfo <- function(x = dir(), sort = "name"){
# load package
require(tools, quietly = T)
# BUILD MAIN DIRECTORIES DF------------------------------------
for (i in 1:length(x)){
if(i == 1){ #first iteration: initiate df
name <- as.character(x[i])
type <- file_ext(x[i])
size <- as.numeric(round(file.size(x[i]) / 1048576, 2))
create <- format(as.Date(file.info(x[i])$ctime),"%Y-%m-%d")
mod <- format(as.Date(file.info(x[i])$mtime),"%Y-%m-%d")
fDir <- file.info(x[1])$isdir
}else{ # all subsequent loops append df
name <- rbind(name, x[i])
type <- rbind(type, file_ext(x[i]))
size <- rbind(size, as.numeric(round(file.size(x[i])/1048576, 2)))
create <- rbind(create , format(as.Date(file.info(x[i])$ctime),"%Y-%m-%d"))
mod <- rbind(mod, format(as.Date(file.info(x[i])$mtime),"%Y-%m-%d"))
fDir <- rbind(fDir, file.info(x[i])$isdir)
}
}
# MAKE DF
df <- cbind(name, type, size, create, mod, fDir)
df <- data.frame(df, stringsAsFactors = F, row.names = 1:length(x))
colnames(df) <- c("Name","Type", "Size", "Created", "LastModified", "Dir")
df$Size <- as.numeric(df$Size)
# load message
cat(paste0("\nHere's what I found in your directory: \n",
"\tFile(s): ",sum(df$Type !="----"), "\t", "Total Size (MB): ", ifelse(sum(df$Size)==0,"< 0.5 MB", sum(df$Size != "< 0.5 MB")),
"\tSub Directories: ", sum(df$Dir == T),
"\n\n",
"Overview (i.e., pwd):\n\n"))
# recode
df$Type[df$Type==""] <- "----"
df$Size[df$Size == 0] <- "< 0.5 MB"
# sorting & print
if(sort == "name"){
df <- df[order(df$Name),]
}
else if(sort == "type"){
df <- df[order(df$Type),]
}
else if(sort == "size"){
df <- df[order(df$Size),]
}
else if(sort == "created"){
df <- df[order(df$Size),]
}
else if(sort == "modified"){
df <- df[order(df$Size),]
}
# print
return(df)
# BUILD SUB DIRECTORIES DF---------------------------
subDF <- subset(df, df$Dir == TRUE)
# for the total number of subdirectories
#™subNum = 0
for(i in 1:length(subDF$Name)){
cat("\n")
cat(subDF$Name[i])
}
}
get.fir
get.dirInfo()
#===============================================================================
# FUNCTION: Get file/directory size in MBs - default is dir()
#===============================================================================
get.dirInfo <- function(x = dir(), sort = "name"){
# load package
require(tools, quietly = T)
# BUILD MAIN DIRECTORIES DF------------------------------------
for (i in 1:length(x)){
if(i == 1){ #first iteration: initiate df
name <- as.character(x[i])
type <- file_ext(x[i])
size <- as.numeric(round(file.size(x[i]) / 1048576, 2))
create <- format(as.Date(file.info(x[i])$ctime),"%Y-%m-%d")
mod <- format(as.Date(file.info(x[i])$mtime),"%Y-%m-%d")
fDir <- file.info(x[1])$isdir
}else{ # all subsequent loops append df
name <- rbind(name, x[i])
type <- rbind(type, file_ext(x[i]))
size <- rbind(size, as.numeric(round(file.size(x[i])/1048576, 2)))
create <- rbind(create , format(as.Date(file.info(x[i])$ctime),"%Y-%m-%d"))
mod <- rbind(mod, format(as.Date(file.info(x[i])$mtime),"%Y-%m-%d"))
fDir <- rbind(fDir, file.info(x[i])$isdir)
}
}
# MAKE DF
df <- cbind(name, type, size, create, mod, fDir)
df <- data.frame(df, stringsAsFactors = F, row.names = 1:length(x))
colnames(df) <- c("Name","Type", "Size", "Created", "LastModified", "Dir")
df$Size <- as.numeric(df$Size)
# load message
cat(paste0("\nHere's what I found in your directory: \n",
"\tFile(s): ",sum(df$Type !="----"), "\t", "Total Size (MB): ", ifelse(sum(df$Size)==0,"< 0.5 MB", sum(df$Size != "< 0.5 MB")),
"\tSub Directories: ", sum(df$Dir == T),
"\n\n",
"Overview (i.e., pwd):\n\n"))
# recode
df$Type[df$Type==""] <- "----"
df$Size[df$Size == 0] <- "< 0.5 MB"
# sorting & print
if(sort == "name"){
df <- df[order(df$Name),]
}
else if(sort == "type"){
df <- df[order(df$Type),]
}
else if(sort == "size"){
df <- df[order(df$Size),]
}
else if(sort == "created"){
df <- df[order(df$Size),]
}
else if(sort == "modified"){
df <- df[order(df$Size),]
}
# print
return(df)
cat("\n\n")
}
get.dirInfo()
#===============================================================================
# FUNCTION: Get file/directory size in MBs - default is dir()
#===============================================================================
get.dirInfo <- function(x = dir(), sort = "name"){
# load package
require(tools, quietly = T)
# BUILD MAIN DIRECTORIES DF------------------------------------
for (i in 1:length(x)){
if(i == 1){ #first iteration: initiate df
name <- as.character(x[i])
type <- file_ext(x[i])
size <- as.numeric(round(file.size(x[i]) / 1048576, 2))
create <- format(as.Date(file.info(x[i])$ctime),"%Y-%m-%d")
mod <- format(as.Date(file.info(x[i])$mtime),"%Y-%m-%d")
fDir <- file.info(x[1])$isdir
}else{ # all subsequent loops append df
name <- rbind(name, x[i])
type <- rbind(type, file_ext(x[i]))
size <- rbind(size, as.numeric(round(file.size(x[i])/1048576, 2)))
create <- rbind(create , format(as.Date(file.info(x[i])$ctime),"%Y-%m-%d"))
mod <- rbind(mod, format(as.Date(file.info(x[i])$mtime),"%Y-%m-%d"))
fDir <- rbind(fDir, file.info(x[i])$isdir)
}
}
# MAKE DF
df <- cbind(name, type, size, create, mod, fDir)
df <- data.frame(df, stringsAsFactors = F, row.names = 1:length(x))
colnames(df) <- c("Name","Type", "Size", "Created", "LastModified", "Dir")
df$Size <- as.numeric(df$Size)
# load message
cat(paste0("\nHere's what I found in your directory: \n",
"\tFile(s): ",sum(df$Type !="----"), "\t", "Total Size (MB): ", ifelse(sum(df$Size)==0,"< 0.5 MB", sum(df$Size != "< 0.5 MB")),
"\tSub Directories: ", sum(df$Dir == T),
"\n\n",
"Overview (i.e., pwd):\n\n"))
# recode
df$Type[df$Type==""] <- "----"
df$Size[df$Size == 0] <- "< 0.5 MB"
# sorting & print
if(sort == "name"){
df <- df[order(df$Name),]
}
else if(sort == "type"){
df <- df[order(df$Type),]
}
else if(sort == "size"){
df <- df[order(df$Size),]
}
else if(sort == "created"){
df <- df[order(df$Size),]
}
else if(sort == "modified"){
df <- df[order(df$Size),]
}
# print
return(df)
}
get.dirInfo("functions/")
setwd("functions/")
getwd()
get.dirInfo()
x <- get.dirInfo()
x
x$Name
x
ls()
df <- data.frame("xvar" = seq(1:10), "yvar" = sample(1:100,10))
make_html_table(df)
make_html_table(df[1],)
make_xtable(df[1],)
make_xtable(df[1])
make_xtable(df[1,])
make_xtable(df[,1])
make_xtable(df$xvar)
make_html_table(df$xvar)
package_checker <- function(package)
{
# set if null
ifelse(is.null(package), warning("ERROR: no input given", immediate. = T),"")
# conditional for package
if(package %in% rownames(installed.packages()) == FALSE){ # search package names
cat("Installing package....")
install.packages(packages,dependencies = T) # otherwise install w/dependencies
} else {
cat("Loading package....")
library(package, quietly = T) # else load quietly
cat("Done!")
}
}
package_checker("ggplot2")
package_checker <- function(package)
{
# set if null
ifelse(is.null(package), warning("ERROR: no input given", immediate. = T),"")
# conditional for package
if(package %in% rownames(installed.packages()) == FALSE){ # search package names
cat("Installing package....")
install.packages(packages,dependencies = T) # otherwise install w/dependencies
} else {
cat("Loading package....")
library(package, quietly = T) # else load quietly
cat("Done!")
}
}
package_checker(ggplot2)
ggplot2
"ggplot2"
x <- "mypackage"
x
package_checker <- function(package)
{
# set if null
ifelse(is.null(package), warning("ERROR: no input given", immediate. = T),"")
# conditional for package
if(package %in% rownames(installed.packages()) == FALSE){ # search package names
cat("Installing package....")
install.packages(packages,dependencies = T) # otherwise install w/dependencies
} else {
cat("Loading package....")
package <- gsub(pattern = '\\"',replacement = "",x = package)
library(package, quietly = T) # else load quietly
cat("Done!")
}
}
package_checker("ggplot2")
gsub(pattern = '\\"', replacement = "", x = x)
gsub(pattern = '\"', replacement = "", x = x)
gsub(pattern = '"', replacement = "", x = x)
as.name(x)
rm(package_checker())
rm(package_checker
)
ls()
library_check <- function(package)
{
# set if null
ifelse(is.null(package), warning("ERROR: no input given", immediate. = T),"")
# conditional for package
if(package %in% rownames(installed.packages()) == FALSE){ # search package names
# for not found, install anyways
cat("Installing package....")
# install
install.packages(packages,dependencies = T) # otherwise install w/dependencies
} else {
# print load message
cat("Loading package....")
# load
library(as.name(package), quietly = T) # else load quietly
# exit message
cat("Done!")
}
}
library_check("ggplot2")
x
x <- as.name(x)
x
x <- as.character(x)
x
library_check <- function(package)
{
# deal with input var
package_check <- as.character(package)
# set if null
ifelse(is.null(package_check), warning("ERROR: no input given", immediate. = T),"")
# conditional for package
if(package_check %in% rownames(installed.packages()) == FALSE){ # search package names
# for not found, install anyways
cat("Installing package....")
# install
install.packages(packages_check,dependencies = T) # otherwise install w/dependencies
} else {
# print load message
cat("Loading package....")
# load
library(package, quietly = T) # else load quietly
# exit message
cat("Done!")
}
}
library_check(ggplot2)
library_check("ggplot2")
library(ggplot2)
library_check <- function(package)
{
# deal with input var
#package_check <- as.character(package)
# set if null
ifelse(is.null(package), warning("ERROR: no input given", immediate. = T),"")
# conditional for package
if(package %in% rownames(installed.packages()) == FALSE){ # search package names
# for not found, install anyways
cat("Installing package....")
# install
install.packages(packages,dependencies = T) # otherwise install w/dependencies
} else {
# print load message
cat("Loading package....")
# load
library(package, quietly = T) # else load quietly
# exit message
cat("Done!")
}
}
library(ggplot2)
library_check("ggplot2")
x
library_check <- function(package)
{
# deal with input var
#package_check <- as.character(package)
# set if null
ifelse(is.null(package), warning("ERROR: no input given", immediate. = T),"")
# conditional for package
if(package %in% rownames(installed.packages()) == FALSE){ # search package names
# for not found, install anyways
cat("Installing package....")
# install
install.packages(packages,dependencies = T) # otherwise install w/dependencies
} else {
# print load message
cat("Loading package....")
# load
library(as.name(package), quietly = T) # else load quietly
# exit message
cat("Done!")
}
}
library_check("ggplot2")
library_check("ggplot2")
library_check <- function(package)
{
# deal with input var
#package_check <- as.character(package)
# set if null
ifelse(is.null(package), warning("ERROR: no input given", immediate. = T),"")
# conditional for package
if(package %in% rownames(installed.packages()) == FALSE){ # search package names
# for not found, install anyways
cat("Installing package....")
# install
install.packages(packages,dependencies = T) # otherwise install w/dependencies
} else {
# print load message
cat("Loading package....")
# load
library(as.name(package), character.only = T) # else load quietly
# exit message
cat("Done!")
}
}
library_check("ggplot2")
library_check <- function(package)
{
# deal with input var
#package_check <- as.character(package)
# set if null
ifelse(is.na(package), warning("ERROR: no input given", immediate. = T),"")
# conditional for package
if(package %in% rownames(installed.packages()) == FALSE){ # search package names
# for not found, install anyways
cat("Installing package....")
# install
install.packages(packages,dependencies = T) # otherwise install w/dependencies
} else {
# print load message
cat("Loading package....")
# load
library(as.name(package), character.only = T) # else load quietly
# exit message
cat("Done!")
}
}
library_check("ggplot2")
library_check <- function(package)
{
# deal with input var
#package_check <- as.character(package)
# set if null
ifelse(is.na(package), warning("ERROR: no input given", immediate. = T),"")
# conditional for package
if(package %in% rownames(installed.packages()) == FALSE){ # search package names
# for not found, install anyways
cat("Installing package....")
# install
install.packages(packages,dependencies = T) # otherwise install w/dependencies
} else {
# print load message
cat("Loading package....")
# load
library(package, character.only = T) # else load quietly
# exit message
cat("Done!")
}
}
library_check("ggplot2")
ls()
install.packages()
rownames(install.packages())
library
library()
library_check("googlesheets")
testit <- function(x = sort(runif(20)), ...)
{
pb <- txtProgressBar(...)
for(i in c(0, x, 1)) {Sys.sleep(0.5); setTxtProgressBar(pb, i)}
Sys.sleep(1)
close(pb)
}
testit()
testit(runif(10))
testit(style = 3)
progBar <- function(x = sort(runif(20)), ...)
{
pb <- txtProgressBar(...)
for(i in c(0, x, 1)) {Sys.sleep(0.5); setTxtProgressBar(pb, i)}
Sys.sleep(1)
close(pb)
}
progBar(runif(4))
progBar(4,runif(4))
progBar(x=1)
txtProgressBar(min = 0, max = 1, char = ".", style = 3)
txtProgressBar(char = ".", style = 3)
progBar <- function(x = sort(runif(20)), ...)
{
pb <- txtProgressBar(char=".",...)
for(i in c(0, x, 1)) {Sys.sleep(0.5); setTxtProgressBar(pb, i)}
Sys.sleep(1)
close(pb)
}
progBar()
progBar(style=3)
runif(20)
sort(runif(10))
